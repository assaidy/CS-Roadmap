#include <cwchar>
#include <iostream>
#include <assert.h>
#include <queue>
#include <vector>

class BST {
private:
    int data {};
    BST *left {};
    BST *right {};

    void clear(BST *bt) {
        std::cout << "destroing node of value " << bt->data 
            << " at address " << bt << "\n";
        delete bt;
    }

public:
    // initialize the  BST with a root
    BST(int data) : data(data) {}

    // TODO:
    // [ ] insert
    // [ ] search
    // [ ] delete

    int get_data() {
        return data;
    }

    // INFO: return a pointer to the new node & nullptr if found
    BST *insert(int key) { // O(h) time
        if (key < data) {
            if (left)
                return left->insert(key);
            else 
                left = new BST(key);
            return left;
        }
        if (key > data) {
            if (right)
                return right->insert(key);
            else 
                right = new BST(key);
            return right;
        }
        return nullptr; // lets make the BST Unique
                        // we can instead make an 'int count' to count
                        // how many existing node with this key
    }

    // INFO: return a pointer to the node & nullptr if not found
    BST *search(int key) { // O(h) time
        if (key == data)
            return this;
        if (left && key < data)
            return left->search(key);
        if (right && key > data)
            return right->search(key);
        return nullptr;
    }

    BST *min() { // O(h) time
        if (!left)
            return this;
        return left->min();
    }

    BST *max() { // O(h) time
        if (!right)
            return this;
        return right->max();
    }

    ~BST() {
        if (left)
            clear(left);
        if (right)
            clear(right);
    }
};

int main() {
    BST bst(13);
    std::cout << bst.insert(13) << "\n"; // 0
    std::cout << bst.insert(10) << "\n";
    std::cout << bst.insert(25) << "\n";
    std::cout << bst.insert(2)  << "\n";
    std::cout << bst.insert(12) << "\n";
    std::cout << bst.insert(20) << "\n";
    std::cout << bst.insert(31) << "\n";
    std::cout << bst.insert(29) << "\n";

    std::cout << "\n";
    std::cout << bst.search(13) << "\n";
    std::cout << bst.search(10) << "\n";
    std::cout << bst.search(31) << "\n";
    std::cout << bst.search(29) << "\n";
    std::cout << bst.search(1)  << "\n"; // 0

    std::cout << bst.min()->get_data() << "\n"; // 2
    std::cout << bst.max()->get_data() << "\n"; // 29

    return 0;
}
